commands = {'timer': 'Устанавливает таймер. Формат ввода: "/timer 23, 45, 5, 2".\n'
                     'В первом аргументе передается количество секунд(обязательный параметр).\n'
                     'Второй - количество минуты.\n'
                     'Третий - количество часов.\n'
                     'Четвертый - количество дней.',
            'timers': 'Выводит список активных таймеров.',
            'unset': 'Удаляет указаный таймер (нумерация нацинается с 0 и начинается с самого старого).\n'
                     'Если в аргументе передать "all" удалит все таймеры.',
            'generation': 'Генерирует по 10 паролей трех возможных уровней ("easy", "normal", "hard").\n'
                          'Если не передать аргумент или передать не корректный аргумент,'
                          'используется сложность "normal" для генерации.',
            'tr_set': 'Меняет текст перевода.\n'
                      'Если не указать аргумет выведет текуший язык перевода.\n'
                      'При передачи аргумента "all" выводит список доступных языков для перевода\n'
                      'Для изменения языка перевода нужно передать двух буквенный код языка '
                      'или его правильное название.',
            'tr': 'Переводит текст. По умолчанию переводит на en - Английский.\n'
                  'Но язык перевода можно изменить командой tr_set',
            'help': 'Выводит описание указаной команды'}


async def help_bot(update, context): 
    data = context.args
    if data:
        if data[0] in commands.keys():
            text = commands[data[0]]
        else:
            text = 'Данная команда отсутствует!'
    else:
        command = "".join(map(lambda x: '\n/' + x, commands.keys()))
        text = f'Вас приветствует бот ассистент.\nДоступные команды: {command}'
        text += '\nЧто бы посмотреть описание команды напишите:\n/help {название команды}\n(без фигурных скобок).'
    await update.effective_message.reply_text(text)
